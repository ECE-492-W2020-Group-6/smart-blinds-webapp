{"version":3,"sources":["config.ts","Components/Atoms/Header/Header.tsx","Components/Molecules/StatusPaper/StatusPaper.tsx","Components/Pages/Splash/Splash.tsx","Components/Pages/ViewSchedules/ViewSchedules.tsx","Components/Atoms/Footer/Footer.tsx","Components/Pages/BlindMenu/BlindMenu.tsx","res/Classes/BlindAPI/BlindAPI.ts","res/Classes/Blind/Blind.ts","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["config","root","defaultPath","mainTitle","MOTORMIDPOINT","withStyles","theme","createStyles","flexGrow","menuButton","marginRight","spacing","title","props","classes","Fragment","AppBar","position","Toolbar","IconButton","component","Link","to","edge","className","color","aria-label","Typography","variant","padding","stats","Paper","List","ListItem","ListItemIcon","ListItemText","secondary","primary","indoorTemp","outdoorTemp","cloudCoverage","list","blindList","switchBlind","Divider","map","blind","key","getAddress","button","onClick","getName","ViewSchedules","Button","appBar","top","bottom","toolBar","display","justifyContent","buttons","index","useState","setStats","schedule","setSchedule","useEffect","undefined","getSchedule","then","scheduleResponse","getStatus","statsResponse","motorPosition","days","BlindAPI","credentials","this","body","requestInit","method","mode","headers","Auth","password","fetch","address","Blind","name","status","promise","Promise","resolve","reject","setTimeout","createFetch","JSON","stringify","height","margin","width","testBlind","otherBlind","blinds","currentBlind","setBlind","setTitle","currentStats","length","statusResponse","location","useLocation","pathname","CssBaseline","exact","path","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.586a948e.chunk.js","sourcesContent":["interface IConfig {\n  root: string;\n  defaultPath: string;\n  mainTitle: string;\n  MOTORMIDPOINT: number;\n}\n\nconst config: IConfig = {\n  root: \"/smart-blinds-webapp\",\n  defaultPath: \"/\",\n  mainTitle: \"Smart Blinds\",\n  MOTORMIDPOINT: 50\n};\n\nexport default config;\n","/**\n * Entity Names:\n *  Header\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  create-react-app\n *\n * The Header functional component sits at the top of the application.\n *\n */\nimport React from \"react\";\nimport config from \"../../../config\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Theme,\n  createStyles,\n  withStyles,\n  WithStyles,\n  Toolbar,\n  IconButton,\n  AppBar,\n  Typography\n} from \"@material-ui/core\";\n// import HomeIcon from \"@material-ui/icons/Home\";\nimport LineWeightIcon from \"@material-ui/icons/LineWeight\";\n\n/**\n * 'styles' allows for styling within typscript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    }\n  });\n\n/**\n * @typeparam <typeof styles>\n * @param title title to display in the header\n */\ninterface Props extends WithStyles<typeof styles> {\n  title: string;\n}\n\n/**\n * The [[Header]] functional component sits at the top of the application.\n * @param props used to pass in stylings\n * @returns React Element; the application header\n */\nconst Header: React.FC<Props> = props => {\n  const { classes, title } = props;\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            component={Link}\n            to={config.root + \"/\"}\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <LineWeightIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            {title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(Header);\n","/**\n * Entity Names:\n *  StatusPaper\n *  props\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  material-ui\n *\n * Sub component that provides received stats in a compact display.\n * Based on a material-ui 'Paper' component\n */\nimport React from \"react\";\nimport {\n  Theme,\n  createStyles,\n  withStyles,\n  WithStyles,\n  Paper,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from \"@material-ui/core\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport AcUnitIcon from \"@material-ui/icons/AcUnit\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport { IStats } from \"../../../res/Interfaces\";\n\n/**\n * 'styles' allows for styling within typscript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(0)\n    },\n    title: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    }\n  });\n\n/**\n * @typeparam <typeof styles>\n * @param stats stats to display\n */\ninterface Props extends WithStyles<typeof styles> {\n  stats: IStats;\n}\n\n/**\n * The [[StatusPaper]] functional component provides stats in a compact display\n * @param props used to pass in stylings\n * @returns React Element; A material-ui 'paper' component displaying stats\n */\nconst StatusPaper: React.FC<Props> = props => {\n  const { classes, stats } = props;\n  return (\n    <React.Fragment>\n      <Paper className={classes.root}>\n        <Typography className={classes.title} color=\"textPrimary\">\n          Current Status:\n        </Typography>\n        <List className={classes.root}></List>\n        <ListItem>\n          <ListItemIcon>\n            <HomeIcon />\n          </ListItemIcon>\n          <ListItemText\n            secondary=\"Indoor Temperature\"\n            primary={`${stats.indoorTemp}°`}\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            {stats.outdoorTemp < 5 ? <AcUnitIcon /> : <WbSunnyIcon />}\n          </ListItemIcon>\n          <ListItemText\n            secondary=\"Outdoor Temperature\"\n            primary={`${stats.outdoorTemp}°`}\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <CloudIcon />\n          </ListItemIcon>\n          <ListItemText\n            secondary=\"Cloud Coverage\"\n            primary={stats.cloudCoverage}\n          />\n        </ListItem>\n      </Paper>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(StatusPaper);\n","/**\n * Entity Names:\n *  Splash\n *  props\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  N/A\n *\n * Splash page for heads-up stats and access to more of the application\n */\nimport React from \"react\";\nimport {\n  Theme,\n  createStyles,\n  withStyles,\n  WithStyles,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  ListItemIcon,\n  Paper\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport config from \"../../../config\";\nimport StatusPaper from \"../../../Components/Molecules/StatusPaper\";\nimport { IStats } from \"../../../res/Interfaces\";\nimport Blind from \"../../../res/Classes/Blind\";\n\n/**\n * 'styles' allows for styling within typscript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(0)\n    },\n    title: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    },\n    list: {\n      padding: theme.spacing(0)\n    }\n  });\n/**\n * @typeparam <typeof styles>\n * @param stats stats to display, passed down to [[StatusPaper]]\n * @param blindList list of blind objects to display\n */\ninterface Props extends WithStyles<typeof styles> {\n  stats: IStats;\n  blindList: Blind[];\n  switchBlind: (blind: Blind) => void;\n}\n\n/**\n * The [[Splash]] functional component acts as the\n * primary landing page for the application.\n * @param props used to pass in stylings\n * @returns React Element; the Splash page\n */\nconst Splash: React.FC<Props> = props => {\n  const { stats, blindList, switchBlind, classes } = props;\n  return (\n    <div className={classes.root}>\n      <StatusPaper stats={stats} />\n      <Divider />\n      <List className={classes.list}>\n        {blindList.map((blind: Blind) => (\n          <React.Fragment key={blind.getAddress()}>\n            <Paper>\n              <ListItem\n                button\n                onClick={() => {\n                  switchBlind(blind);\n                }}\n                component={Link}\n                to={config.root + \"/blind\"}\n              >\n                <ListItemIcon>\n                  <ArrowRightIcon />\n                </ListItemIcon>\n                <ListItemText primary={blind.getName()} />\n              </ListItem>\n            </Paper>\n            <Divider />\n          </React.Fragment>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Splash);\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\n\nconst ViewSchedules: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Button variant=\"contained\" color=\"primary\">\n        Hello World\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport default ViewSchedules;\n","/**\n * Entity Names:\n *  Header\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 11, 2020\n * Derived From:\n *  create-react-app\n *\n * The Footer functional component provides buttons at the bottom of the screen.\n *\n */\nimport React from \"react\";\nimport {\n  Theme,\n  createStyles,\n  withStyles,\n  WithStyles,\n  Toolbar,\n  AppBar\n} from \"@material-ui/core\";\n\n/**\n * 'styles' allows for styling within typescript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    },\n    appBar: {\n      top: \"auto\",\n      bottom: 0\n    },\n    toolBar: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    }\n  });\n\n/**\n * @typeparam <typeof styles>\n */\ninterface Props extends WithStyles<typeof styles> {\n  buttons: JSX.Element[];\n}\n\n/**\n * The [[Footer]] functional component sits at the bottom of the application.\n * @param props used to pass in stylings\n * @returns React Element; the component footer\n */\nconst Footer: React.FC<Props> = props => {\n  const { buttons, classes } = props;\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar className={classes.toolBar}>\n          {buttons.map((button: JSX.Element, index: number) => (\n            <React.Fragment key={index}>{button}</React.Fragment>\n          ))}\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(Footer);\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Theme,\n  createStyles,\n  withStyles,\n  WithStyles,\n  Paper,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Button\n} from \"@material-ui/core\";\nimport Brightness5Icon from \"@material-ui/icons/Brightness5\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport BorderAllIcon from \"@material-ui/icons/BorderAll\";\nimport FormatAlignJustifyIcon from \"@material-ui/icons/FormatAlignJustify\";\nimport Blind from \"../../../res/Classes/Blind\";\nimport { Link } from \"react-router-dom\";\n// import { IStats } from \"../../../res/Interfaces\";\nimport config from \"../../../config\";\nimport Footer from \"../../Atoms/Footer\";\n\nconst LOADING_MESSAGE = \"loading...\";\n\n/**\n * 'styles' allows for styling within typescript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(0)\n    },\n    title: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    },\n    list: {\n      padding: theme.spacing(0)\n    }\n  });\n/**\n * @typeparam <typeof styles>\n * @param blind the blind in question\n */\ninterface Props extends WithStyles<typeof styles> {\n  blind: Blind;\n}\n\n/**\n * The [[BlindMenu]] functional component acts as the\n * primary landing page for the application.\n * @param props used to pass in stylings and the blind object\n * @returns React Element; the BlindMenu component\n */\nconst BlindMenu: React.FC<Props> = props => {\n  const { classes, blind } = props;\n  const [stats, setStats] = useState();\n  const [schedule, setSchedule] = useState();\n\n  useEffect(() => {\n    if (blind === undefined) {\n      return;\n    }\n    blind.getSchedule().then(scheduleResponse => {\n      setSchedule(scheduleResponse);\n    });\n    blind.getStatus().then(statsResponse => {\n      setStats(statsResponse);\n    });\n  }, [blind]);\n\n  return (\n    <React.Fragment>\n      <Paper className={classes.root}>\n        <Typography className={classes.title} color=\"textPrimary\">\n          Current Status:\n        </Typography>\n        <List className={classes.root}></List>\n        <ListItem>\n          <ListItemIcon>\n            {stats === undefined ? (\n              <AutorenewIcon />\n            ) : stats.motorPosition > config.MOTORMIDPOINT ? (\n              <BorderAllIcon />\n            ) : (\n              <FormatAlignJustifyIcon />\n            )}\n          </ListItemIcon>\n          <ListItemText\n            secondary=\"Motor Position\"\n            primary={\n              stats === undefined ? LOADING_MESSAGE : stats.motorPosition\n            } //convert\n          />\n        </ListItem>\n\n        <ListItem>\n          <ListItemIcon>\n            {schedule === undefined ? (\n              <AutorenewIcon />\n            ) : schedule.days === \"Auto\" ? (\n              <EcoIcon />\n            ) : schedule.days === \"Light\" ? (\n              <Brightness5Icon />\n            ) : (\n              <Brightness3Icon />\n            )}\n          </ListItemIcon>\n          <ListItemText\n            secondary=\"Behavior\"\n            primary={schedule === undefined ? LOADING_MESSAGE : schedule.days} //convert\n          />\n        </ListItem>\n      </Paper>\n      <Footer\n        buttons={[\n          <Button component={Link} to={config.root + \"/\"} color=\"inherit\">\n            Manual Control\n          </Button>,\n          <Button color=\"inherit\">Set Schedule</Button>\n        ]}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(BlindMenu);\n","import { ICredentials } from \"../../Interfaces\";\n\nclass BlindAPI {\n  private credentials: ICredentials;\n\n  constructor(credentials: ICredentials) {\n    this.credentials = credentials;\n  }\n\n  async createFetch(body: any): Promise<Response> {\n    let requestInit: RequestInit = {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"text/json\",\n        Auth: this.credentials.password\n      },\n      body: body\n    };\n    return fetch(this.credentials.address, requestInit);\n  }\n}\n\nexport default BlindAPI;\n","/**\n * Entity Names:\n *  Blind\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  N/A\n *\n * Object that abstracts blind actions to the rest of the application\n */\nimport BlindAPI from \"../BlindAPI\";\nimport { ICredentials, IStats, ISchedule } from \"../../Interfaces\";\n\n/**\n * Abstracts Smart Blind operation\n */\nclass Blind {\n  private name: string;\n  private BlindAPI: BlindAPI;\n  private address: string;\n  /**\n   * @param name Name of blind device\n   * @param credentials credential object for access and authentication\n   */\n  constructor(name: string, credentials: ICredentials) {\n    this.BlindAPI = new BlindAPI(credentials);\n    this.name = name;\n    this.address = credentials.address;\n  }\n\n  /**\n   * @returns a promise that resolves to an [[IStats]] object\n   */\n  async getStatus(): Promise<IStats> {\n    // let response = await this.BlindAPI.createFetch(\"Status\");\n    // let responseJSON = await response.clone().json();\n    // let status: IStats = responseJSON.status;\n    let status = {\n      // temp\n      indoorTemp: 22,\n      outdoorTemp: -23,\n      cloudCoverage: \"High\",\n      motorPosition: 50\n    };\n\n    const promise = new Promise<IStats>((resolve, reject) => {\n      setTimeout(() => {\n        resolve(status);\n      }, 500);\n    });\n    return promise;\n  }\n\n  /**\n   * @returns a promise that resolves to an [[ISchedule]] object\n   */\n  async getSchedule(): Promise<ISchedule> {\n    // let response = await this.BlindAPI.createFetch(\"Status\");\n    // let responseJSON = await response.clone().json();\n    // let schedule: ISchedule = responseJSON.status;\n\n    var schedule = { days: \"Auto\" };\n    const promise = new Promise<ISchedule>((resolve, reject) => {\n      setTimeout(() => {\n        resolve(schedule);\n      }, 500);\n    });\n\n    return promise;\n  }\n\n  /**\n   * @param schedule sends or configures a new schedule to a device\n   */\n  async setSchedule(schedule: ISchedule) {\n    this.BlindAPI.createFetch(JSON.stringify(schedule));\n    // let responseJSON = await response.clone().json();\n  }\n\n  /**\n   * @returns name of the blind\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  /**\n   * @param name sets a new name for the blind\n   */\n  setName(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * @returns IP address of blind device\n   */\n  getAddress(): string {\n    return this.address;\n  }\n}\n\nexport default Blind;\n","/**\n * Entity Names:\n *  App\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  create-react-app\n *\n * The App object acts as the root of the application.\n * All other components branch out in usage from this functional component.\n * 'styles' allows for styling within typescript code.\n *\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport config from \"../config\";\nimport { Redirect, useLocation } from \"react-router\";\nimport { Switch, Route } from \"react-router-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Header from \"../Components/Atoms/Header\";\nimport { Theme, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\nimport Splash from \"../Components/Pages/Splash\";\nimport ViewSchedules from \"../Components/Pages/ViewSchedules\";\nimport BlindMenu from \"../Components/Pages/BlindMenu\";\nimport Blind from \"../res/Classes/Blind\";\nimport { IStats } from \"../res/Interfaces\";\n\n/**\n * 'styles' allows for styling within typescript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      height: \"100%\",\n      margin: \"0\",\n      width: \"100vw\",\n      position: \"fixed\"\n    }\n  });\n\n/**\n * @typeparam <typeof styles>\n */\ninterface Props extends WithStyles<typeof styles> {}\n\n/**\n * The [[App]] functional component acts as the root of the application.\n * All other components branch out in usage from this component.\n * @param props used to pass in stylings\n * @returns React Element; the application\n */\nconst App = (props: Props) => {\n  const { classes } = props;\n\n  let testBlind: Blind = new Blind(\"Test Blinds\", {\n    address: \"localhost\",\n    password: \"123pass\"\n  });\n  let otherBlind: Blind = new Blind(\"Other blinds\", {\n    address: \"1.255.02.3\",\n    password: \"pass123\"\n  });\n  let testStats: IStats = {\n    indoorTemp: 21,\n    outdoorTemp: 20,\n    cloudCoverage: \"Low\",\n    motorPosition: 0\n  };\n  const [blinds, setBlinds] = useState([testBlind, otherBlind]);\n  const [currentBlind, setBlind] = useState();\n  const [title, setTitle] = useState(\"Smart Blinds\");\n\n  // temporary until the webserver is configured\n  const [currentStats, setStats] = useState(testStats);\n\n  useEffect(() => {\n    if (blinds.length < 1) {\n      return;\n    }\n    blinds[0].getStatus().then(statusResponse => {\n      setStats(statusResponse);\n    });\n  }, [blinds]);\n\n  function switchBlind(blind: Blind) {\n    setBlind(blind);\n    setTitle(blind.getName());\n  }\n\n  var location = useLocation();\n  useEffect(() => {\n    if (location.pathname === config.root + config.defaultPath) {\n      setTitle(config.mainTitle);\n    }\n  }, [location]);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Header title={title} />\n      <Switch>\n        <Route\n          exact\n          path={config.root + \"/\"}\n          render={props => (\n            <Splash\n              {...props}\n              stats={currentStats}\n              blindList={blinds}\n              switchBlind={switchBlind}\n            />\n          )}\n        />\n        <Route\n          path={config.root + \"/blind\"}\n          render={props => <BlindMenu {...props} blind={currentBlind} />}\n        />\n        <Route path={config.root + \"/schedules\"} component={ViewSchedules} />\n        <Redirect to={config.root + config.defaultPath} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./res/styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}