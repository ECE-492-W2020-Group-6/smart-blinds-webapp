{"version":3,"sources":["config.ts","Components/Atoms/Header/Header.tsx","Components/Molecules/StatusPaper/StatusPaper.tsx","Components/Pages/Splash/Splash.tsx","Components/Pages/ViewSchedules/ViewSchedules.tsx","Components/Pages/BlindInfo/BlindInfo.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["config","root","defaultPath","withStyles","theme","createStyles","flexGrow","menuButton","marginRight","spacing","title","props","classes","Fragment","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","Typography","variant","padding","stats","Paper","List","ListItem","ListItemIcon","ListItemText","secondary","primary","indoorTemp","outdoorTemp","cloudCoverage","ViewSchedules","Button","BlindInfo","height","margin","width","useState","currentStats","CssBaseline","path","render","component","to","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c1676d59.chunk.js","sourcesContent":["interface IConfig {\r\n  root: string;\r\n  defaultPath: string;\r\n}\r\n\r\nconst config: IConfig = {\r\n  root: \"/smart-blinds-webapp\",\r\n  defaultPath: \"/\"\r\n};\r\n\r\nexport default config;\r\n","import React from \"react\";\r\nimport {\r\n  Theme,\r\n  createStyles,\r\n  withStyles,\r\n  WithStyles,\r\n  Toolbar,\r\n  IconButton,\r\n  AppBar,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n      flexGrow: 1\r\n    }\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  title: string;\r\n}\r\n\r\nconst Header: React.FC<Props> = props => {\r\n  const { classes, title } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <HomeIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            {title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Header);\r\n","import React from \"react\";\r\nimport {\r\n  Theme,\r\n  createStyles,\r\n  withStyles,\r\n  WithStyles,\r\n  Paper,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport AcUnitIcon from \"@material-ui/icons/AcUnit\";\r\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\r\nimport CloudIcon from \"@material-ui/icons/Cloud\";\r\nimport { IStats } from \"../../../res/Interfaces\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(0)\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(2)\r\n    }\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  stats: IStats;\r\n}\r\n\r\nconst StatusPaper: React.FC<Props> = props => {\r\n  const { classes, stats } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <Paper className={classes.root}>\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"textPrimary\"\r\n          // gutterBottom\r\n        >\r\n          Current Status:\r\n        </Typography>\r\n        <List className={classes.root}></List>\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            secondary=\"Indoor Temperature\"\r\n            primary={`${stats.indoorTemp}°`}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            {stats.outdoorTemp < 5 ? <AcUnitIcon /> : <WbSunnyIcon />}\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            secondary=\"Outdoor Temperature\"\r\n            primary={`${stats.outdoorTemp}°`}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <CloudIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            secondary=\"Cloud Coverage\"\r\n            primary={stats.cloudCoverage}\r\n          />\r\n        </ListItem>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(StatusPaper);\r\n","import React from \"react\";\r\nimport { Theme, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\n\r\nimport StatusPaper from \"../../../Components/Molecules/StatusPaper\";\r\nimport { IStats } from \"../../../res/Interfaces\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(0)\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(2)\r\n    }\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  stats: IStats;\r\n}\r\n\r\nconst Splash: React.FC<Props> = props => {\r\n  const { stats } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <StatusPaper stats={stats} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Splash);\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst ViewSchedules: React.FC = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant=\"contained\" color=\"primary\">\r\n        Hello World\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ViewSchedules;\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nconst BlindInfo: React.FC = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Button variant=\"contained\" color=\"primary\">\r\n        Hello World\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BlindInfo;\r\n","import React, { useState } from \"react\";\r\nimport config from \"../config\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Header from \"../Components/Atoms/Header\";\r\nimport { Theme, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\r\nimport Splash from \"../Components/Pages/Splash\";\r\nimport ViewSchedules from \"../Components/Pages/ViewSchedules\";\r\nimport BlindInfo from \"../Components/Pages/BlindInfo\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      height: \"100%\",\r\n      margin: \"0\",\r\n      width: \"100vw\",\r\n      position: \"fixed\"\r\n    }\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {}\r\n\r\nconst App = (props: Props) => {\r\n  const { classes } = props;\r\n  //dummy for now\r\n  const [currentStats, setStats] = useState({\r\n    indoorTemp: 21,\r\n    outdoorTemp: 0,\r\n    cloudCoverage: \"Low\"\r\n  });\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <Header title=\"Smart Blinds\" />\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route\r\n            path={config.root + \"/\"}\r\n            render={props => <Splash {...props} stats={currentStats} />}\r\n          />\r\n          <Route path={config.root + \"/blind\"} component={BlindInfo} />\r\n          <Route path={config.root + \"/schedules\"} component={ViewSchedules} />\r\n          <Redirect to={config.defaultPath} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./res/styles/index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}