{"version":3,"sources":["config.ts","Components/Atoms/Header/Header.tsx","Components/Molecules/StatusPaper/StatusPaper.tsx","Components/Pages/Splash/Splash.tsx","Components/Pages/ViewSchedules/ViewSchedules.tsx","Components/Pages/BlindInfo/BlindInfo.tsx","res/Classes/BlindAPI/BlindAPI.ts","res/Classes/Blind/Blind.ts","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["config","root","defaultPath","withStyles","theme","createStyles","flexGrow","menuButton","marginRight","spacing","title","props","classes","Fragment","AppBar","position","Toolbar","IconButton","component","Link","to","edge","className","color","aria-label","Typography","variant","padding","stats","Paper","List","ListItem","ListItemIcon","ListItemText","secondary","primary","indoorTemp","outdoorTemp","cloudCoverage","list","blindList","Divider","map","blind","key","getAddress","button","getName","ViewSchedules","Button","BlindInfo","BlindAPI","credentials","this","body","requestInit","method","mode","headers","Auth","password","fetch","address","Blind","name","createFetch","response","clone","json","responseJSON","status","schedule","JSON","stringify","height","margin","width","useState","motorPosition","currentStats","blinds","CssBaseline","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a3cb2b1.chunk.js","sourcesContent":["interface IConfig {\n  root: string;\n  defaultPath: string;\n}\n\nconst config: IConfig = {\n  root: \"/smart-blinds-webapp\",\n  defaultPath: \"/\"\n};\n\nexport default config;\n","/**\n * Entity Names:\n *  Header\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  create-react-app\n *\n * The Header functional component sits at the top of the application.\n *\n */\nimport React from \"react\";\nimport config from \"../../../config\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Theme,\n  createStyles,\n  withStyles,\n  WithStyles,\n  Toolbar,\n  IconButton,\n  AppBar,\n  Typography\n} from \"@material-ui/core\";\n// import HomeIcon from \"@material-ui/icons/Home\";\nimport LineWeightIcon from \"@material-ui/icons/LineWeight\";\n\n/**\n * 'styles' allows for styling within typscript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    }\n  });\n\n/**\n * @typeparam <typeof styles>\n * @param title title to display in the header\n */\ninterface Props extends WithStyles<typeof styles> {\n  title: string;\n}\n\n/**\n * The [[Header]] functional component sits at the top of the application.\n * @param props used to pass in stylings\n * @returns React Element; the application header\n */\nconst Header: React.FC<Props> = props => {\n  const { classes, title } = props;\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            component={Link}\n            to={config.root + \"/\"}\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <LineWeightIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            {title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(Header);\n","/**\n * Entity Names:\n *  StatusPaper\n *  props\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  material-ui\n *\n * Sub component that provides received stats in a compact display.\n * Based on a material-ui 'Paper' component\n */\nimport React from \"react\";\nimport {\n  Theme,\n  createStyles,\n  withStyles,\n  WithStyles,\n  Paper,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from \"@material-ui/core\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport AcUnitIcon from \"@material-ui/icons/AcUnit\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport { IStats } from \"../../../res/Interfaces\";\n\n/**\n * 'styles' allows for styling within typscript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(0)\n    },\n    title: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    }\n  });\n\n/**\n * @typeparam <typeof styles>\n * @param stats stats to display\n */\ninterface Props extends WithStyles<typeof styles> {\n  stats: IStats;\n}\n\n/**\n * The [[StatusPaper]] functional component provides stats in a compact display\n * @param props used to pass in stylings\n * @returns React Element; A material-ui 'paper' component displaying stats\n */\nconst StatusPaper: React.FC<Props> = props => {\n  const { classes, stats } = props;\n  return (\n    <React.Fragment>\n      <Paper className={classes.root}>\n        <Typography className={classes.title} color=\"textPrimary\">\n          Current Status:\n        </Typography>\n        <List className={classes.root}></List>\n        <ListItem>\n          <ListItemIcon>\n            <HomeIcon />\n          </ListItemIcon>\n          <ListItemText\n            secondary=\"Indoor Temperature\"\n            primary={`${stats.indoorTemp}°`}\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            {stats.outdoorTemp < 5 ? <AcUnitIcon /> : <WbSunnyIcon />}\n          </ListItemIcon>\n          <ListItemText\n            secondary=\"Outdoor Temperature\"\n            primary={`${stats.outdoorTemp}°`}\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <CloudIcon />\n          </ListItemIcon>\n          <ListItemText\n            secondary=\"Cloud Coverage\"\n            primary={stats.cloudCoverage}\n          />\n        </ListItem>\n      </Paper>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(StatusPaper);\n","/**\n * Entity Names:\n *  Splash\n *  props\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  N/A\n *\n * Splash page for heads-up stats and access to more of the application\n */\nimport React from \"react\";\nimport {\n  Theme,\n  createStyles,\n  withStyles,\n  WithStyles,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  ListItemIcon,\n  Paper\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport config from \"../../../config\";\nimport StatusPaper from \"../../../Components/Molecules/StatusPaper\";\nimport { IStats } from \"../../../res/Interfaces\";\nimport Blind from \"../../../res/Classes/Blind\";\n\n/**\n * 'styles' allows for styling within typscript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(0)\n    },\n    title: {\n      flexGrow: 1,\n      padding: theme.spacing(2)\n    },\n    list: {\n      padding: theme.spacing(0)\n    }\n  });\n/**\n * @typeparam <typeof styles>\n * @param stats stats to display, passed down to [[StatusPaper]]\n * @param blindList list of blind objects to display\n */\ninterface Props extends WithStyles<typeof styles> {\n  stats: IStats;\n  blindList: Blind[];\n}\n\n/**\n * The [[Splash]] functional component acts as the\n * primary landing page for the application.\n * @param props used to pass in stylings\n * @returns React Element; the Splash page\n */\nconst Splash: React.FC<Props> = props => {\n  const { stats, blindList, classes } = props;\n  return (\n    <div className={classes.root}>\n      <StatusPaper stats={stats} />\n      <Divider />\n      <List className={classes.list}>\n        {blindList.map((blind: Blind) => (\n          <React.Fragment key={blind.getAddress()}>\n            <Paper>\n              <ListItem button component={Link} to={config.root + \"/blind\"}>\n                <ListItemIcon>\n                  <ArrowRightIcon />\n                </ListItemIcon>\n                <ListItemText primary={blind.getName()} />\n              </ListItem>\n            </Paper>\n            <Divider />\n          </React.Fragment>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Splash);\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\n\nconst ViewSchedules: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Button variant=\"contained\" color=\"primary\">\n        Hello World\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport default ViewSchedules;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\n\nconst BlindInfo: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Button variant=\"contained\" color=\"primary\">\n        Hello World\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport default BlindInfo;\n","import { ICredentials } from \"../../Interfaces\";\n\nclass BlindAPI {\n  private credentials: ICredentials;\n\n  constructor(credentials: ICredentials) {\n    this.credentials = credentials;\n  }\n\n  async createFetch(body: any): Promise<Response> {\n    let requestInit: RequestInit = {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"text/json\",\n        Auth: this.credentials.password\n      },\n      body: body\n    };\n    return fetch(this.credentials.address, requestInit);\n  }\n}\n\nexport default BlindAPI;\n","/**\n * Entity Names:\n *  Blind\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  N/A\n *\n * Object that abstracts blind actions to the rest of the application\n */\nimport BlindAPI from \"../BlindAPI\";\nimport { ICredentials, IStats, ISchedule } from \"../../Interfaces\";\n\n/**\n * Abstracts Smart Blind operation\n */\nclass Blind {\n  private name: string;\n  private BlindAPI: BlindAPI;\n  private address: string;\n  /**\n   * @param name Name of blind device\n   * @param credentials credential object for access and authentication\n   */\n  constructor(name: string, credentials: ICredentials) {\n    this.BlindAPI = new BlindAPI(credentials);\n    this.name = name;\n    this.address = credentials.address;\n  }\n\n  /**\n   * @returns a promise that resolves to an [[IStats]] object\n   */\n  async getStatus(): Promise<IStats> {\n    let response = await this.BlindAPI.createFetch(\"Status\");\n    let responseJSON = await response.clone().json();\n    let status: IStats = responseJSON.status;\n    return status;\n  }\n\n  /**\n   * @returns a promise that resolves to an [[ISchedule]] object\n   */\n  async getSchedule(): Promise<ISchedule> {\n    let response = await this.BlindAPI.createFetch(\"Status\");\n    let responseJSON = await response.clone().json();\n    let schedule: ISchedule = responseJSON.status;\n    return schedule;\n  }\n\n  /**\n   * @param schedule sends or configures a new schedule to a device\n   */\n  async setSchedule(schedule: ISchedule) {\n    this.BlindAPI.createFetch(JSON.stringify(schedule));\n    // let responseJSON = await response.clone().json();\n  }\n\n  /**\n   * @returns name of the blind\n   */\n  getName(): string {\n    return this.name;\n  }\n\n  /**\n   * @param name sets a new name for the blind\n   */\n  setName(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * @returns IP address of blind device\n   */\n  getAddress(): string {\n    return this.address;\n  }\n}\n\nexport default Blind;\n","/**\n * Entity Names:\n *  App\n *  styles\n * Author(s):\n *  Kevin de Haan\n * Date Created:\n *  Feb 1, 2020\n * Derived From:\n *  create-react-app\n *\n * The App object acts as the root of the application.\n * All other components branch out in usage from this functional component.\n * 'styles' allows for styling within typscript code.\n *\n */\n\nimport React, { useState } from \"react\";\nimport config from \"../config\";\nimport { Redirect } from \"react-router\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Header from \"../Components/Atoms/Header\";\nimport { Theme, createStyles, withStyles, WithStyles } from \"@material-ui/core\";\nimport Splash from \"../Components/Pages/Splash\";\nimport ViewSchedules from \"../Components/Pages/ViewSchedules\";\nimport BlindInfo from \"../Components/Pages/BlindInfo\";\nimport Blind from \"../res/Classes/Blind\";\n\n/**\n * 'styles' allows for styling within typscript code.\n * @param theme originates from Material-UI\n */\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      height: \"100%\",\n      margin: \"0\",\n      width: \"100vw\",\n      position: \"fixed\"\n    }\n  });\n\n/**\n * @typeparam <typeof styles>\n */\ninterface Props extends WithStyles<typeof styles> {}\n\n/**\n * The [[App]] functional component acts as the root of the application.\n * All other components branch out in usage from this component.\n * @param props used to pass in stylings\n * @returns React Element; the application\n */\nconst App = (props: Props) => {\n  const { classes } = props;\n  // temporary until the webserver is configured\n  const [currentStats, setStats] = useState({\n    indoorTemp: 21,\n    outdoorTemp: 0,\n    cloudCoverage: \"Low\",\n    motorPosition: 0\n  });\n\n  // temporary\n  const [blinds, setBlinds] = useState([\n    new Blind(\"Test Blinds\", { address: \"localhost\", password: \"123pass\" }),\n    new Blind(\"Other blinds\", { address: \"1.255.02.3\", password: \"pass123\" })\n  ]);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <BrowserRouter>\n        <Header title=\"Smart Blinds\" />\n        <Switch>\n          <Route\n            exact\n            path={config.root + \"/\"}\n            render={props => (\n              <Splash {...props} stats={currentStats} blindList={blinds} />\n            )}\n          />\n          <Route path={config.root + \"/blind\"} component={BlindInfo} />\n          <Route path={config.root + \"/schedules\"} component={ViewSchedules} />\n          <Redirect to={config.root + config.defaultPath} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./res/styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}